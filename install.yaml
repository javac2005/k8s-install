#准备，安装：必要软件、docker、k8s，开始 ->
- hosts: all
  remote_user: root
  tasks:
  - name: 关闭防火墙
    shell: "systemctl stop firewalld.service || true &&\ 
           systemctl disable firewalld.service || true "
  - name: 禁用selinux
    shell: "setenforce 0 || true &&\ 
            sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config"
    ignore_errors: yes
  - name: 加载bridge、br_netfilter模块，并设置开机启动
    shell: "modprobe bridge && modprobe br_netfilter &&\ 
            touch /etc/modules-load.d/k8s.conf && echo 'bridge' > /etc/modules-load.d/k8s.conf &&\ 
            echo 'br_netfilter' >> /etc/modules-load.d/k8s.conf"
  - name: 设置iptables转发规则
    sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_set: yes
      state: present
      reload: yes
    with_items:
    - {"name":"net.bridge.bridge-nf-call-iptables", "value":1}
    - {"name":"net.bridge.bridge-nf-call-ip6tables","value":1}
    - {"name":"vm.swappiness","value":0}
  #- name: 更新系统
  #  yum: name=* state=latest update_cache=yes
  - name: 安装必要软件
    yum: name="{{ packages }}" state=present
    vars:
      packages:
      - nfs-utils
      - epel-release
      - net-tools
      - wget
      - ntpdate
      - bash-completion
      - lrzsz
      - unzip
      - bridge-utils.x86_64
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
  - name: 同步时间
    shell: rm -rf /etc/localtime && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && ntpdate -u cn.pool.ntp.org
  - name: 配置源
    copy: src=files/kubernetes.repo dest=/etc/yum.repos.d/
  - name: 判断是否配置过docker-ce.repo
    shell: ls /etc/yum.repos.d | grep docker-ce.repo || echo 0
    register: check_docker_ce_repo
  - name: 配置docker-ce.repo（如果没配置过）
    shell: "yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"
    when: check_docker_ce_repo.stdout == "0"
  - name: 判断是否已安装docker
    shell: ls /usr/lib/systemd/system | grep docker.service || echo 0
    register: check_docker
  - name: 安装docker-ce-17.03.2
    shell: "yum -y install --setopt=obsoletes=0 \
      https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm \
      docker-ce-17.03.2.ce-1.el7.centos"
    when: check_docker.stdout == "0"
  - name: 启动 docker
    shell: systemctl daemon-reload;systemctl enable docker;systemctl start docker
  - name: 安装k8s
    yum: name={{ packages }} state=present
    vars:
      packages:
      - kubernetes-cni-0.6.0
      - kubelet-1.13.3
      - kubeadm-1.13.3
      - kubectl-1.13.3
  - name: 启动kubelet
    shell: systemctl daemon-reload;systemctl enable kubelet;systemctl start kubelet
  - name: 拉取k8s必要镜像
    shell: "docker pull {{ google_repo }}/{{ item }} &&\ 
            docker tag {{ google_repo }}/{{ item }} k8s.gcr.io/{{ item }} &&\ 
            docker rmi -f {{ google_repo }}/{{ item }}"
    with_items: ["kube-proxy:v1.13.3","kube-apiserver:v1.13.3","kube-controller-manager:v1.13.3","kube-scheduler:v1.13.3","coredns:1.2.6","etcd:3.2.24","pause:3.1"]
  - name: 拉取flannel镜像
    shell: "docker pull {{ ali_repo }}/flannel:v0.10.0-amd64 &&\ 
           docker tag {{ ali_repo }}/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64 &&\ 
           docker rmi -f {{ ali_repo }}/flannel:v0.10.0-amd64"
# <- 准备，安装：必要软件、docker、k8s，结束


#安装三个etcd，开始 ->
- hosts: ctrl
  remote_user: root
  vars:
    etcds:
    - {"path":"/tmp/etcd/etcd0","name":"etcd0","host":"{{ groups.etcd[0] }}"}
    - {"path":"/tmp/etcd/etcd1","name":"etcd1","host":"{{ groups.etcd[1] }}"}
    - {"path":"/tmp/etcd/etcd2","name":"etcd2","host":"{{ groups.etcd[2] }}"}
  tasks:
  - name: 解决证书有效期为一年的问题
    shell: "docker pull {{ ali_repo }}/kubeadm:1.13.3 && docker run --rm -v /tmp/kubeadm/:/tmp/kubeadm/ \
            {{ ali_repo }}/kubeadm:1.13.3 sh -c 'cp /kubeadm /tmp/kubeadm/' &&\ 
            mv /tmp/kubeadm/kubeadm /usr/bin/ -f || true && chmod +x /usr/bin/kubeadm"
  - name: 删除/etc/kubernetes
    file:
      path: /etc/kubernetes
      state: absent
  - name: 删除目录 /tmp/etcd
    file:
      path: /tmp/etcd
      state: absent
  - name: 创建目录 /tmp/etcd/xxx
    file:
      path: "{{ item.path }}"
      state: directory
    with_items: "{{ etcds }}"
  - name: 生成配置文件
    template:
      src: files/etcd.j2
      dest: "{{ item.path }}/etcd.yaml"
    with_items: "{{ etcds }}"
  - name: 生成ca证书
    shell: "kubeadm init phase certs etcd-ca"
  - name: 生成其他证书
    shell: "kubeadm init phase certs etcd-server --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs etcd-peer --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs etcd-healthcheck-client --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs apiserver-etcd-client --config={{ item.path }}/etcd.yaml &&\ 
            cp -R /etc/kubernetes/pki {{ item.path }} &&\ 
            find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete"
    with_items: "{{ etcds }}"
  - name: 删除/etc/kubernetes
    file:
      path: /etc/kubernetes
      state: absent

- hosts: etcd
  tasks:
  - name: 删除/etc/kubernetes
    file:
      path: /etc/kubernetes
      state: absent
  - name: 拷贝证书文件
    copy:
      src: "/tmp/etcd/{{ hostname }}/pki/"
      dest: /etc/kubernetes/pki
  - name: 删除 ca.key
    file:
      path: /etc/kubernetes/pki/etcd/ca.key
      state: absent
  - name: 删除容器
    shell: "docker rm -vf etcd"
    ignore_errors: yes
  - name: 删除/var/lib/etcd
    file:
      path: /var/lib/etcd
      state: absent
    ignore_errors: yes
  - name: 启动docker容器
    shell: "docker run --name etcd --restart always -d -p 2379:2379 -p 2380:2380 \
            -v /var/lib/etcd/:/var/lib/etcd/ \
            -v /etc/kubernetes/:/etc/kubernetes/ \
            k8s.gcr.io/etcd:3.2.24 etcd \
            --advertise-client-urls=https://{{ inventory_hostname }}:2379 \
            --initial-advertise-peer-urls=https://{{ inventory_hostname }}:2380 \
            --initial-cluster='{{ hostvars[groups.etcd[0]]['hostname'] }}=https://{{ groups.etcd[0] }}:2380,{{ hostvars[groups.etcd[1]]['hostname'] }}=https://{{ groups.etcd[1] }}:2380,{{ hostvars[groups.etcd[2]]['hostname'] }}=https://{{ groups.etcd[2] }}:2380' \
            --initial-cluster-state=new \
            --listen-client-urls=https://0.0.0.0:2379 \
            --listen-peer-urls=https://0.0.0.0:2380 \
            --name={{ hostname }} \
            --cert-file=/etc/kubernetes/pki/etcd/server.crt \
            --client-cert-auth=true \
            --data-dir=/var/lib/etcd \
            --key-file=/etc/kubernetes/pki/etcd/server.key \
            --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt \
            --peer-client-cert-auth=true \
            --peer-key-file=/etc/kubernetes/pki/etcd/peer.key \
            --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt \
            --snapshot-count=10000 \
            --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt"
- hosts: master[0]
  tasks:
  - name: 拷贝证书文件
    copy:
      src: "/tmp/etcd/etcd0/{{ item }}"
      dest: "/etc/kubernetes/{{ item }}"
    with_items:
    - pki/etcd/ca.crt
    - pki/apiserver-etcd-client.crt
    - pki/apiserver-etcd-client.key
# <- 安装三个etcd，结束

#初始化第一个master节点，开始 ->
- hosts: master[0]
  remote_user: root
  tasks:
  - name: 解决证书有效期为一年的问题
    shell: "docker pull {{ ali_repo }}/kubeadm:1.13.3 && docker run --rm -v /tmp/kubeadm/:/tmp/kubeadm/ \
            {{ ali_repo }}/kubeadm:1.13.3 sh -c 'cp /kubeadm /tmp/kubeadm/' &&\ 
            mv /tmp/kubeadm/kubeadm /usr/bin/ -f || true && chmod +x /usr/bin/kubeadm"
  - name: 创建flannel配置文件目录
    file:
      path: /etc/cni/net.d/
      state: directory
  - name: 拷贝flannel配置文件
    copy:
      src: files/10-flannel.conflist
      dest: /etc/cni/net.d/
  - name: 拷贝kubeadm-config.yaml配置文件
    template:
      src: files/kubeadm-config.j2
      dest: ./kubeadm-config.yaml
  - name: 初始化第一个master
    shell: kubeadm init --config=kubeadm-config.yaml
  - name: 配置kubectl的执行环境
    shell: "mkdir -p /root/.kube &&\ 
           rm -rf /root/.kube/config &&\ 
           cp /etc/kubernetes/admin.conf /root/.kube/config"
  - name: 拷贝kube-flannel.yml文件
    copy:
      src: files/kube-flannel.yml
      dest: .
  - name: 安装flannel网络
    shell: kubectl apply -f kube-flannel.yml
  - name: 从master[0]拷贝k8s的config
    fetch:
      src: /etc/kubernetes/admin.conf
      dest: /root/.kube/
      Flat: Yes
# <- 初始化第一个master节点，结束